{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Personal\\\\code\\\\Notes-compilation\\\\React-JS\\\\section-7-practice-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport InputForm from './components/InputForm';\nimport Table from './components/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //const yearlyData = []; // per-year results\n  const [data, setData] = useState();\n  const yearlyData = [];\n  const calculateHandler = userInput => {\n    userInput.preventDefault();\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    let currentSavings = +userInput.target['current-savings'].value; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.target['yearly-contribution'].value; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.target['expected-return'].value / 100;\n    const duration = +userInput.target['duration'].value;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n    setData(yearlyData);\n    console.log(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      calculateHandler: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), yearlyData.length > 1 ? /*#__PURE__*/_jsxDEV(Table, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 33\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"No calculated data yet!\"\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lif/WApPZI6pT1W4YSJwxeyij3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","InputForm","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","yearlyData","calculateHandler","userInput","preventDefault","currentSavings","target","value","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/chris/Personal/code/Notes-compilation/React-JS/section-7-practice-react/src/App.js"],"sourcesContent":["import {useState} from 'react'\r\nimport Header from './components/Header';\r\nimport InputForm from './components/InputForm';\r\nimport Table from './components/Table';\r\n\r\nfunction App() {\r\n  //const yearlyData = []; // per-year results\r\n  const [data, setData] = useState()\r\n  const yearlyData = []\r\n  \r\n  const calculateHandler = (userInput) => {\r\n    userInput.preventDefault()\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n    let currentSavings = +userInput.target['current-savings'].value; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput.target['yearly-contribution'].value; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput.target['expected-return'].value / 100;\r\n    const duration = +userInput.target['duration'].value;\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n      yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution,\r\n      });\r\n    }\r\n    console.log(yearlyData)\r\n    // do something with yearlyData ...\r\n    setData(yearlyData)\r\n    console.log(data)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <InputForm calculateHandler={calculateHandler}/>\r\n      {/* Todo: Show below table conditionally (only once result data is available) */}\r\n      {/* Show fallback text if no data is available */}\r\n      {\r\n        yearlyData.length > 1 ? <Table data={yearlyData}/> : <>No calculated data yet!</>\r\n        \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAClC,MAAMY,UAAU,GAAG,EAAE;EAErB,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtCA,SAAS,CAACC,cAAc,CAAC,CAAC;IAC1B;IACA;IACA,IAAIC,cAAc,GAAG,CAACF,SAAS,CAACG,MAAM,CAAC,iBAAiB,CAAC,CAACC,KAAK,CAAC,CAAC;IACjE,MAAMC,kBAAkB,GAAG,CAACL,SAAS,CAACG,MAAM,CAAC,qBAAqB,CAAC,CAACC,KAAK,CAAC,CAAC;IAC3E,MAAME,cAAc,GAAG,CAACN,SAAS,CAACG,MAAM,CAAC,iBAAiB,CAAC,CAACC,KAAK,GAAG,GAAG;IACvE,MAAMG,QAAQ,GAAG,CAACP,SAAS,CAACG,MAAM,CAAC,UAAU,CAAC,CAACC,KAAK;;IAEpD;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGP,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIO,cAAc,GAAGJ,kBAAkB;MACrDP,UAAU,CAACY,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEV,cAAc;QAChCG,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAQ,OAAO,CAACC,GAAG,CAAChB,UAAU,CAAC;IACvB;IACAD,OAAO,CAACC,UAAU,CAAC;IACnBe,OAAO,CAACC,GAAG,CAAClB,IAAI,CAAC;EACnB,CAAC;EAED,oBACEL,OAAA;IAAAwB,QAAA,gBACExB,OAAA,CAACJ,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACT5B,OAAA,CAACH,SAAS;MAACW,gBAAgB,EAAEA;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAI9CrB,UAAU,CAACsB,MAAM,GAAG,CAAC,gBAAG7B,OAAA,CAACF,KAAK;MAACO,IAAI,EAAEE;IAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBAAG5B,OAAA,CAAAE,SAAA;MAAAsB,QAAA,EAAE;IAAuB,gBAAE,CAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGhF,CAAC;AAEV;AAACxB,EAAA,CA5CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}