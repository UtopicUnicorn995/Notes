{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Personal\\\\code\\\\Notes-compilation\\\\React-JS\\\\section-7-practice-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport InputForm from \"./components/InputForm\";\nimport Table from \"./components/Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  //const yearlyData = []; // per-year results\n\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n  };\n  const yearlyData = [];\n  if (userInput) {\n    console.log(userInput);\n\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    let currentSavings = +userInput[\"current-savings\"].value; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"].value; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"].value / 100;\n    const duration = +userInput[\"duration\"].value;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  }\n  console.log(yearlyData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), !userInput ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"shit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","InputForm","Table","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","console","log","currentSavings","value","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","data","_c","$RefreshReg$"],"sources":["C:/Users/chris/Personal/code/Notes-compilation/React-JS/section-7-practice-react/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport InputForm from \"./components/InputForm\";\r\nimport Table from \"./components/Table\";\r\n\r\nfunction App() {\r\n  const [userInput, setUserInput] = useState(null);\r\n  //const yearlyData = []; // per-year results\r\n\r\n  const calculateHandler = (userInput) => {\r\n    setUserInput(userInput);\r\n  };\r\n\r\n  const yearlyData = [];\r\n\r\n  if(userInput){\r\n    console.log(userInput)\r\n    \r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n    let currentSavings = +userInput[\"current-savings\"].value; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput[\"yearly-contribution\"].value; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput[\"expected-return\"].value / 100;\r\n    const duration = +userInput[\"duration\"].value;\r\n  \r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n      yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution,\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  console.log(yearlyData)\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <InputForm onCalculate={calculateHandler} />\r\n      {/* Todo: Show below table conditionally (only once result data is available) */}\r\n      {/* Show fallback text if no data is available */}\r\n      {!userInput  ? <p>shit</p> : <Table data={yearlyData}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD;;EAEA,MAAMU,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;EACzB,CAAC;EAED,MAAMG,UAAU,GAAG,EAAE;EAErB,IAAGH,SAAS,EAAC;IACXI,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;;IAEtB;IACA;IACA,IAAIM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,CAACO,KAAK,CAAC,CAAC;IAC1D,MAAMC,kBAAkB,GAAG,CAACR,SAAS,CAAC,qBAAqB,CAAC,CAACO,KAAK,CAAC,CAAC;IACpE,MAAME,cAAc,GAAG,CAACT,SAAS,CAAC,iBAAiB,CAAC,CAACO,KAAK,GAAG,GAAG;IAChE,MAAMG,QAAQ,GAAG,CAACV,SAAS,CAAC,UAAU,CAAC,CAACO,KAAK;;IAE7C;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGN,cAAc,GAAGG,cAAc;MACtDH,cAAc,IAAIM,cAAc,GAAGJ,kBAAkB;MACrDL,UAAU,CAACU,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAET,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;EACF;EAGAJ,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;EAEvB,oBACEN,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACJ,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVvB,OAAA,CAACH,SAAS;MAAC2B,WAAW,EAAEnB;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG3C,CAACpB,SAAS,gBAAIH,OAAA;MAAAmB,QAAA,EAAG;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAAGvB,OAAA,CAACF,KAAK;MAAC2B,IAAI,EAAEnB;IAAW;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAACrB,EAAA,CA9CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}